<style>
page {
    height: 100%;
}

.actions {
    position: relative;
    height: 100%;
}

.actionsItem {
    border-radius: 100rpx;
    background-color: red;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 140rpx;
    height: 140rpx;
    font-size: 12px;
    line-height: 140rpx;
    text-align: center;
    margin-left: -70rpx;
    margin-top: -70rpx;
    transform-origin: 50% 50%;
    animation-fill-mode: forwards;
    opacity: 0;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    font-family: Arial;
    color: #fff;
}

.actionsItem--back {
    opacity: 1;
    background-color: blue;
}
</style>

<template>
    <b1 :title.sync="title"></b1>
    <view class="actions">
        <block wx:for="{{actions}}" wx:key="{{index}}">
            <navigator url="{{item.nav}}" class="actionsItem" animation="{{animationData[index]}}">
                {{item.name}}
            </navigator>
        </block>
        <view class="actionsItem actionsItem--back" @tap="backUrl">back</view>
    </view>
</template>

<script>
import wepy from 'wepy'
import BigTitle from '../../components/bigTitle'
import {
    getPos
} from '../../util/circleposition'

export default class extends wepy.page {
    components = {
        b1: BigTitle
    }
    actions = [{
        name: "Grouping",
        nav: "/pages/basketball/grouping"
    }/* , {
  name: "MatchTime",
  nav: "/pages/basketball/action/matchtime/index"
} */, {
        name: "others",
        nav: "/pages/feedback"
    }, {
        name: "others",
        nav: "/pages/feedback"
    }, {
        name: "others",
        nav: "/pages/feedback"
    }, {
        name: "others",
        nav: "/pages/feedback"
    }, {
        name: "others",
        nav: "/pages/feedback"
    }, {
        name: "others",
        nav: "/pages/feedback"
    }];
    data = {
        actions: this.actions,
        rotateDeg: 0,
        animationData: [],
        title:"篮球"
    }
    p = 0;
    methods = {
        backUrl() {
            this.$parent.backtolastpage();
        }
    }

    onLoad() {
        setTimeout(() => {
            this.actions.forEach((v, k) => {
                var animation = wx.createAnimation({
                    duration: 500,
                    timingFunction: 'ease',
                });
                let [x, y] = getPos(this.actions.length, this.p);
                this.p++;
                animation.translate(x, -y).opacity(1).step();
                this["animationData"][k] = animation.export();
            });
            this.$apply();
        }, 200);
    }
}
</script>
